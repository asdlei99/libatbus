#
# Appveyor configuration file for CI build of hiredis-happ on Windows (under Cygwin)
#
# For further details see http://www.appveyor.com
#

#
# Custom environment variables
#
environment:
    global:
        PREBUILT_ROOT: C:/Users/appveyor/prebuilt
        SETUP_ROOT: C:/Users/appveyor/setup
        PKG_SRC_ROOT: C:/Users/appveyor/pkg_src
        LIBUV_VERSION: 1.18.0
        MSYS2_PREFIX: C:/tools/msys64
        MSYS2_LOG_FILE: C:/Users/appveyor/pkg_src/output.log
    matrix:
        - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
          platform: x64
          LIBUV_PKG: https://dist.libuv.org/dist/v1.18.0/libuv-x64-v1.18.0.build20.exe
          LIBUV_ROOT: C:/Users/appveyor/prebuilt/x64/1.18.0
          CMAKE_GEN: Visual Studio 15 2017 Win64
        - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
          platform: x64
          LIBUV_PKG: https://dist.libuv.org/dist/v1.18.0/libuv-x64-v1.18.0.build20.exe
          LIBUV_ROOT: C:/Users/appveyor/prebuilt/x64/1.18.0
          CMAKE_GEN: Visual Studio 14 2015 Win64
        - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
          platform: x64
          LIBUV_PKG: https://dist.libuv.org/dist/v1.18.0/libuv-x64-v1.18.0.build20.exe
          LIBUV_ROOT: C:/Users/appveyor/prebuilt/x64/1.18.0
          CMAKE_GEN: Visual Studio 12 2013 Win64
        - os: MinGW
          LIBUV_PKG: https://dist.libuv.org/dist/v1.18.0/libuv-v1.18.0.tar.gz
          LIBUV_ROOT: C:/Users/appveyor/prebuilt/mingw32/1.18.0
          CMAKE_GEN: MinGW32
        - os: MinGW
          LIBUV_PKG: https://dist.libuv.org/dist/v1.18.0/libuv-v1.18.0.tar.gz
          LIBUV_ROOT: C:/Users/appveyor/prebuilt/mingw64/1.18.0
          CMAKE_GEN: MinGW64

configuration: RelWithDebInfo

#
# Cache Cygwin files to speed up build
#
cache:
    - C:\Users\appveyor\prebuilt

#
# Do a shallow clone of the repo to speed up build
#
clone_depth: 1

#
# Initialisation prior to pulling the Mono repository
# Attempt to ensure we don't try to convert line endings to Win32 CRLF as this will cause build to fail
#
init:
    - ps: >-
        if ( -not ( Test-Path "$Env:LIBUV_ROOT" ) ) {

            mkdir "$Env:LIBUV_ROOT"

        }

        if ( -not ( Test-Path "$Env:SETUP_ROOT" ) ) {

            mkdir "$Env:SETUP_ROOT"

        }

        if ( -not ( Test-Path "$Env:PKG_SRC_ROOT" ) ) {

            mkdir "$Env:PKG_SRC_ROOT"

        }

        if ( -not ( Test-Path "$Env:MSYS2_PREFIX" ) ) {

            mkdir "$Env:MSYS2_PREFIX"

        }

    - ps: >-
        & git config --global core.autocrlf input

        if ( "$Env:OS" -ieq "MinGW" ) {

            if ( Test-Path "C:/msys64" ) {

                $Env:MSYS2_PREFIX="C:/msys64"

                $Env:PATH="$Env:MSYS2_PREFIX;$Env:PATH"

            } else {

                & cinst -y msys2 | Out-Host

            }

            echo "" > "$Env:MSYS2_LOG_FILE"

            Get-ChildItem "$Env:MSYS2_PREFIX"

        }

    - ps: >-
        if ( "$Env:OS" -ieq "MinGW" ) {

            echo "$Env:MSYS2_PREFIX/msys2_shell -lc 'pacman -Su --noconfirm --force > '$Env:MSYS2_LOG_FILE' 2>&1'"

            & "$Env:MSYS2_PREFIX/msys2_shell" -lc "pacman -Su --noconfirm --force > '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

            Get-Content "$Env:MSYS2_LOG_FILE"
        }

#
# Install needed build dependencies
#
install:
    - ps: >-
        if ( "$Env:OS" -ieq "MinGW" ) {

            if ( Test-Path "$Env:LIBUV_ROOT/lib/libuv.a" ) {

                echo "using prebuilt cache $Env:LIBUV_ROOT"

            } else {

                & "$Env:MSYS2_PREFIX/msys2_shell" -lc 'for pkg_name in cmake m4 curl wget tar autoconf automake mingw-w64-x86_64-toolchain mingw-w64-x86_64-toolchain mingw-w64-i686-toolchain mingw-w64-x86_64-libtool mingw-w64-i686-libtool python; do pacman -S --noconfirm --force $pkg_name >> '$Env:MSYS2_LOG_FILE' 2>&1; done' | Out-Host

                Get-Content "$Env:MSYS2_LOG_FILE"

                $LIBUV_PKG_PATH="$Env:SETUP_ROOT/libuv-v$Env:LIBUV_VERSION.tar.gz"

                $LIBUV_TAR_PATH="$Env:SETUP_ROOT/libuv-v$Env:LIBUV_VERSION.tar"

                if ( Test-Path "$LIBUV_PKG_PATH" ) {

                    echo "using cache $LIBUV_PKG_PATH"

                } else {

                    Invoke-WebRequest "$Env:LIBUV_PKG" -OutFile "$LIBUV_PKG_PATH"

                }

                echo "7z x -y -o'$Env:PKG_SRC_ROOT' '$LIBUV_PKG_PATH'"

                & 7z x -y -o"$Env:SETUP_ROOT" "$LIBUV_PKG_PATH"

                echo "7z x -y -o'$Env:PKG_SRC_ROOT' '$LIBUV_TAR_PATH'"

                & 7z x -y -o"$Env:PKG_SRC_ROOT" "$LIBUV_TAR_PATH"

                if ( "$Env:CMAKE_GEN" -ieq "MinGW32" ) {

                    echo "$Env:MSYS2_PREFIX/msys2_shell -mingw32 -lc cd '$Env:PKG_SRC_ROOT/libuv-v$Env:LIBUV_VERSION' && ./autogen.sh ; ./configure --prefix=$Env:LIBUV_ROOT --with-pic=yes --enable-shared=no --enable-static=yes ; make install"

                    & "$Env:MSYS2_PREFIX/msys2_shell" -mingw32 -lc "cd '$Env:PKG_SRC_ROOT/libuv-v$Env:LIBUV_VERSION' && ./autogen.sh > '$Env:MSYS2_LOG_FILE' 2>&1; ./configure --prefix=$Env:LIBUV_ROOT --with-pic=yes --enable-shared=no --enable-static=yes >> '$Env:MSYS2_LOG_FILE' 2>&1; make install >> '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

                    Get-Content "$Env:MSYS2_LOG_FILE"

                } else {

                    echo "$Env:MSYS2_PREFIX/msys2_shell -mingw64 -lc cd '$Env:PKG_SRC_ROOT/libuv-v$Env:LIBUV_VERSION' && ./autogen.sh ; ./configure --prefix=$Env:LIBUV_ROOT --with-pic=yes --enable-shared=no --enable-static=yes ; make install"

                    & "$Env:MSYS2_PREFIX/msys2_shell" -mingw64 -lc "cd '$Env:PKG_SRC_ROOT/libuv-v$Env:LIBUV_VERSION' && ./autogen.sh  > '$Env:MSYS2_LOG_FILE' 2>&1; ./configure --prefix=$Env:LIBUV_ROOT --with-pic=yes --enable-shared=no --enable-static=yes >> '$Env:MSYS2_LOG_FILE' 2>&1; make install >> '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

                    Get-Content "$Env:MSYS2_LOG_FILE"
                }

            }

        } else {

            if ( Test-Path "$Env:LIBUV_ROOT/libuv.dll" ) {

                echo "using prebuilt cache $Env:LIBUV_ROOT"

            } else {

                $LIBUV_PKG_PATH="$Env:SETUP_ROOT/libuv-$Env:PLATFORM-$Env:LIBUV_VERSION.exe"

                if ( Test-Path "$LIBUV_PKG_PATH" ) {

                    echo "using cache $LIBUV_PKG_PATH"

                } else {

                    Invoke-WebRequest "$Env:LIBUV_PKG" -OutFile "$LIBUV_PKG_PATH"

                }

                echo "7z x -y -o'$Env:LIBUV_ROOT' '$LIBUV_PKG_PATH'"

                & 7z x -y -o"$Env:LIBUV_ROOT" "$LIBUV_PKG_PATH"
            }
        }

# Build script
#
# NOTES:
#
# The stdin/stdout file descriptor appears not to be valid for the Appveyor
# build which causes failures as certain functions attempt to redirect
# default file handles. Ensure a dummy file descriptor is opened with 'exec'.
#
build_script:
    - ps: >-

        cd "$Env:APPVEYOR_BUILD_FOLDER"

        New-Item -Path build -ItemType directory

        cd build

        Remove-Item -r *

        if ( "$Env:OS" -ieq "MinGW" ) {

            if ( "$Env:CMAKE_GEN" -ieq "MinGW32" ) {

                echo "$Env:MSYS2_PREFIX/msys2_shell -mingw32 -lc cd '$Env:APPVEYOR_BUILD_FOLDER/build'; mkdir build cmake .. -G 'MSYS Makefiles' -DLIBUV_ROOT='$Env:LIBUV_ROOT' -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DPROJECT_ENABLE_TOOLS=ON ; make -j4"

                & "$Env:MSYS2_PREFIX/msys2_shell" -mingw32 -lc "cd '$Env:APPVEYOR_BUILD_FOLDER/build'; cmake .. -G 'MSYS Makefiles' -DLIBUV_ROOT='$Env:LIBUV_ROOT' -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DPROJECT_ENABLE_TOOLS=ON > '$Env:MSYS2_LOG_FILE' 2>&1; make -j4 >> '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

                Get-Content "$Env:MSYS2_LOG_FILE"

            } else {

                echo "$Env:MSYS2_PREFIX/msys2_shell -mingw64 -lc cd '$Env:APPVEYOR_BUILD_FOLDER/build'; cmake .. -G 'MSYS Makefiles' -DLIBUV_ROOT='$Env:LIBUV_ROOT' -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DPROJECT_ENABLE_TOOLS=ON ; make -j4"

                & "$Env:MSYS2_PREFIX/msys2_shell" -mingw64 -lc "cd '$Env:APPVEYOR_BUILD_FOLDER/build'; cmake ..  -G 'MSYS Makefiles' -DLIBUV_ROOT='$Env:LIBUV_ROOT' -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DPROJECT_ENABLE_TOOLS=ON  > '$Env:MSYS2_LOG_FILE' 2>&1; make -j4 >> '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

                Get-Content "$Env:MSYS2_LOG_FILE"

            }

        } else {

            echo "cmake ..  -G '$Env:CMAKE_GEN' -DLIBUV_ROOT='$Env:LIBUV_ROOT' -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DPROJECT_ENABLE_TOOLS=ON -DCMAKE_BUILD_TYPE=$Env:CONFIGURATION"

            & cmake ..  -G "$Env:CMAKE_GEN" -DLIBUV_ROOT="$Env:LIBUV_ROOT" -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DPROJECT_ENABLE_TOOLS=ON -DCMAKE_BUILD_TYPE=$Env:CONFIGURATION

            echo "cmake --build . --config $Env:CONFIGURATION"

            & cmake --build . --config $Env:CONFIGURATION
        }
#
# Run unit test
# Can not get failed log in mingw, so just check if build success in mingw(custom test myself)
#
test_script:
    - ps: >-

        if ( "$Env:OS" -ieq "MinGW" ) {

            if ( "$Env:CMAKE_GEN" -ieq "MinGW32" ) {

                echo "$Env:MSYS2_PREFIX/msys2_shell -mingw32 -lc cd '$Env:APPVEYOR_BUILD_FOLDER/build'; ctest . -V"

                & "$Env:MSYS2_PREFIX/msys2_shell" -mingw32 -lc "cd '$Env:APPVEYOR_BUILD_FOLDER/build'; ctest . -V > '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

                Get-Content "$Env:MSYS2_LOG_FILE"

            } else {

                echo "$Env:MSYS2_PREFIX/msys2_shell -mingw64 -lc cd '$Env:APPVEYOR_BUILD_FOLDER/build'; ctest . -V"

                & "$Env:MSYS2_PREFIX/msys2_shell" -mingw64 -lc "cd '$Env:APPVEYOR_BUILD_FOLDER/build'; ctest . -V > '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

                Get-Content "$Env:MSYS2_LOG_FILE"

            }

        } else {

            $Env:PATH = "$Env:PATH;$Env:LIBUV_ROOT"

            & ctest . -V -C $Env:CONFIGURATION

        }

#
# Only build the master branch
#
branches:
  only:
    - master

# no need artifacts
notifications:
    - provider: Email
      to:
      - admin@owent.net
      - owt5008137@live.com
      on_build_success: false
      on_build_failure: false
      on_build_status_changed: true
    - provider: Webhook
      url: https://webhooks.gitter.im/e/38667a3c50b8e322422a
      on_build_success: false
      on_build_failure: false
      on_build_status_changed: true