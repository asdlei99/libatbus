#.rst:
# libatbus-config.cmake
# --------
#
# Find the native libatbus includes and library.
#
#
# Result Variables
# ^^^^^^^^^^^^^^^^
#
# This module defines the following variables:
#
# ::
#
#   Libatbus_INCLUDE_DIRS   - where to find detail/libatbus_config.h , etc.
#   Libatbus_LIBRARY_DIRS   - where to find (lib)atbus.(a/so/lib/dll/dylib), etc.
#   Libatbus_LIBRARIES      - List of libraries when using libatbus.
#   Libatbus_FOUND          - True if libatbus found.
#   Libatbus_VERSION        - Full version of libatbus
#
# ::
#

#=============================================================================
# Copyright 2018 OWenT.
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file Copyright.txt for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================
# (To distribute this file outside of CMake, substitute the full
#  License text for the above reference.)

set(Libatbus_VERSION "@LIBATBUS_VERSION@")

@PACKAGE_INIT@

################################################################################
# libatbus source dir
set(Libatbus_SOURCE_DIR "@PROJECT_SOURCE_DIR@")

set_and_check(Libatbus_INCLUDE_DIRS "@PACKAGE_INCLUDE_INSTALL_DIR@")
set_and_check(Libatbus_LIBRARY_DIRS "@PACKAGE_CMAKE_INSTALL_LIBDIR@")


# Normal search.
set(Libatbus_NAMES atbus libatbus)

# Try each search configuration.
find_library(Libatbus_LIBRARIES    NAMES ${Libatbus_NAMES}    PATHS ${Libatbus_LIBRARY_DIRS} NO_DEFAULT_PATH)

mark_as_advanced(Libatbus_INCLUDE_DIRS Libatbus_LIBRARY_DIRS Libatbus_LIBRARIES Libcotask_LIBRARIES)

# handle the QUIETLY and REQUIRED arguments and set LIBATBUS_FOUND to TRUE if
# all listed variables are TRUE
include("FindPackageHandleStandardArgs")
FIND_PACKAGE_HANDLE_STANDARD_ARGS(Libatbus 
    FOUND_VAR Libatbus_FOUND
    REQUIRED_VARS Libatbus_INCLUDE_DIRS Libatbus_LIBRARIES)

if (Libatbus_FOUND)
    set(LIBATBUS_FOUND ${Libatbus_FOUND})
endif()


# check_required_components(Libatbus)